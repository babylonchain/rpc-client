// Code generated by MockGen. DO NOT EDIT.
// Source: client/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonchain/babylon/x/btccheckpoint/types"
	types0 "github.com/babylonchain/babylon/x/btclightclient/types"
	config "github.com/babylonchain/rpc-client/config"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonClient is a mock of BabylonClient interface.
type MockBabylonClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonClientMockRecorder
}

// MockBabylonClientMockRecorder is the mock recorder for MockBabylonClient.
type MockBabylonClientMockRecorder struct {
	mock *MockBabylonClient
}

// NewMockBabylonClient creates a new mock instance.
func NewMockBabylonClient(ctrl *gomock.Controller) *MockBabylonClient {
	mock := &MockBabylonClient{ctrl: ctrl}
	mock.recorder = &MockBabylonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonClient) EXPECT() *MockBabylonClientMockRecorder {
	return m.recorder
}

// GetAddr mocks base method.
func (m *MockBabylonClient) GetAddr() (types1.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(types1.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddr indicates an expected call of GetAddr.
func (mr *MockBabylonClientMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockBabylonClient)(nil).GetAddr))
}

// GetConfig mocks base method.
func (m *MockBabylonClient) GetConfig() *config.BabylonConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*config.BabylonConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockBabylonClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockBabylonClient)(nil).GetConfig))
}

// GetDefaultQueryContext mocks base method.
func (m *MockBabylonClient) GetDefaultQueryContext() (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultQueryContext")
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// GetDefaultQueryContext indicates an expected call of GetDefaultQueryContext.
func (mr *MockBabylonClientMockRecorder) GetDefaultQueryContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultQueryContext", reflect.TypeOf((*MockBabylonClient)(nil).GetDefaultQueryContext))
}

// GetTagIdx mocks base method.
func (m *MockBabylonClient) GetTagIdx() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagIdx")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetTagIdx indicates an expected call of GetTagIdx.
func (mr *MockBabylonClientMockRecorder) GetTagIdx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagIdx", reflect.TypeOf((*MockBabylonClient)(nil).GetTagIdx))
}

// InsertBTCSpvProof mocks base method.
func (m *MockBabylonClient) InsertBTCSpvProof(msg *types.MsgInsertBTCSpvProof) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBTCSpvProof", msg)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBTCSpvProof indicates an expected call of InsertBTCSpvProof.
func (mr *MockBabylonClientMockRecorder) InsertBTCSpvProof(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBTCSpvProof", reflect.TypeOf((*MockBabylonClient)(nil).InsertBTCSpvProof), msg)
}

// InsertHeader mocks base method.
func (m *MockBabylonClient) InsertHeader(msg *types0.MsgInsertHeader) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHeader", msg)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHeader indicates an expected call of InsertHeader.
func (mr *MockBabylonClientMockRecorder) InsertHeader(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHeader", reflect.TypeOf((*MockBabylonClient)(nil).InsertHeader), msg)
}

// InsertHeaders mocks base method.
func (m *MockBabylonClient) InsertHeaders(msgs []*types0.MsgInsertHeader) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHeaders", msgs)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHeaders indicates an expected call of InsertHeaders.
func (mr *MockBabylonClientMockRecorder) InsertHeaders(msgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHeaders", reflect.TypeOf((*MockBabylonClient)(nil).InsertHeaders), msgs)
}

// MustGetAddr mocks base method.
func (m *MockBabylonClient) MustGetAddr() types1.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetAddr")
	ret0, _ := ret[0].(types1.AccAddress)
	return ret0
}

// MustGetAddr indicates an expected call of MustGetAddr.
func (mr *MockBabylonClientMockRecorder) MustGetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetAddr", reflect.TypeOf((*MockBabylonClient)(nil).MustGetAddr))
}

// Stop mocks base method.
func (m *MockBabylonClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBabylonClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBabylonClient)(nil).Stop))
}
