// Code generated by MockGen. DO NOT EDIT.
// Source: query/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonchain/babylon/x/btccheckpoint/types"
	types0 "github.com/babylonchain/babylon/x/btclightclient/types"
	types1 "github.com/babylonchain/babylon/x/checkpointing/types"
	types2 "github.com/babylonchain/babylon/x/epoching/types"
	types3 "github.com/babylonchain/babylon/x/monitor/types"
	types4 "github.com/babylonchain/babylon/x/zoneconcierge/types"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types5 "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "github.com/golang/mock/gomock"
	coretypes "github.com/cometbft/cometbft/rpc/core/types"
)

// MockBabylonQueryClient is a mock of BabylonQueryClient interface.
type MockBabylonQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonQueryClientMockRecorder
}

// MockBabylonQueryClientMockRecorder is the mock recorder for MockBabylonQueryClient.
type MockBabylonQueryClientMockRecorder struct {
	mock *MockBabylonQueryClient
}

// NewMockBabylonQueryClient creates a new mock instance.
func NewMockBabylonQueryClient(ctrl *gomock.Controller) *MockBabylonQueryClient {
	mock := &MockBabylonQueryClient{ctrl: ctrl}
	mock.recorder = &MockBabylonQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonQueryClient) EXPECT() *MockBabylonQueryClientMockRecorder {
	return m.recorder
}

// BTCBaseHeader mocks base method.
func (m *MockBabylonQueryClient) BTCBaseHeader() (*types0.QueryBaseHeaderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCBaseHeader")
	ret0, _ := ret[0].(*types0.QueryBaseHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCBaseHeader indicates an expected call of BTCBaseHeader.
func (mr *MockBabylonQueryClientMockRecorder) BTCBaseHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCBaseHeader", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCBaseHeader))
}

// BTCCheckpointParams mocks base method.
func (m *MockBabylonQueryClient) BTCCheckpointParams() (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCCheckpointParams")
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCCheckpointParams indicates an expected call of BTCCheckpointParams.
func (mr *MockBabylonQueryClientMockRecorder) BTCCheckpointParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCCheckpointParams", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCCheckpointParams))
}

// BTCHeaderChainTip mocks base method.
func (m *MockBabylonQueryClient) BTCHeaderChainTip() (*types0.QueryTipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCHeaderChainTip")
	ret0, _ := ret[0].(*types0.QueryTipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCHeaderChainTip indicates an expected call of BTCHeaderChainTip.
func (mr *MockBabylonQueryClientMockRecorder) BTCHeaderChainTip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCHeaderChainTip", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCHeaderChainTip))
}

// BTCMainChain mocks base method.
func (m *MockBabylonQueryClient) BTCMainChain(pagination *query.PageRequest) (*types0.QueryMainChainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCMainChain", pagination)
	ret0, _ := ret[0].(*types0.QueryMainChainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCMainChain indicates an expected call of BTCMainChain.
func (mr *MockBabylonQueryClientMockRecorder) BTCMainChain(pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCMainChain", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCMainChain), pagination)
}

// BTCCheckpointInfo mocks base method.
func (m *MockBabylonQueryClient) BTCCheckpointInfo(epochNumber uint64) (*types.QueryBtcCheckpointInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCCheckpointInfo", epochNumber)
	ret0, _ := ret[0].(*types.QueryBtcCheckpointInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCCheckpointInfo indicates an expected call of BTCCheckpointInfo.
func (mr *MockBabylonQueryClientMockRecorder) BTCCheckpointInfo(epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCCheckpointInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCCheckpointInfo), epochNumber)
}

// BTCCheckpointsInfo mocks base method.
func (m *MockBabylonQueryClient) BTCCheckpointsInfo(pagination *query.PageRequest) (*types.QueryBtcCheckpointsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCCheckpointsInfo", pagination)
	ret0, _ := ret[0].(*types.QueryBtcCheckpointsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCCheckpointsInfo indicates an expected call of BTCCheckpointsInfo.
func (mr *MockBabylonQueryClientMockRecorder) BTCCheckpointsInfo(startEpoch, endEpoch, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCCheckpointsInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCCheckpointsInfo), startEpoch, endEpoch, pagination)
}

// BlsPublicKeyList mocks base method.
func (m *MockBabylonQueryClient) BlsPublicKeyList(epochNumber uint64, pagination *query.PageRequest) (*types1.QueryBlsPublicKeyListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlsPublicKeyList", epochNumber, pagination)
	ret0, _ := ret[0].(*types1.QueryBlsPublicKeyListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlsPublicKeyList indicates an expected call of BlsPublicKeyList.
func (mr *MockBabylonQueryClientMockRecorder) BlsPublicKeyList(epochNumber, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlsPublicKeyList", reflect.TypeOf((*MockBabylonQueryClient)(nil).BlsPublicKeyList), epochNumber, pagination)
}

// ConnectedChainEpochInfo mocks base method.
func (m *MockBabylonQueryClient) ConnectedChainEpochInfo(chainID string, epochNum uint64) (*types4.QueryEpochChainInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedChainEpochInfo", chainID, epochNum)
	ret0, _ := ret[0].(*types4.QueryEpochChainInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectedChainEpochInfo indicates an expected call of ConnectedChainEpochInfo.
func (mr *MockBabylonQueryClientMockRecorder) ConnectedChainEpochInfo(chainID, epochNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedChainEpochInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).ConnectedChainEpochInfo), chainID, epochNum)
}

// ConnectedChainHeaders mocks base method.
func (m *MockBabylonQueryClient) ConnectedChainHeaders(chainID string, pagination *query.PageRequest) (*types4.QueryListHeadersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedChainHeaders", chainID, pagination)
	ret0, _ := ret[0].(*types4.QueryListHeadersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectedChainHeaders indicates an expected call of ConnectedChainHeaders.
func (mr *MockBabylonQueryClientMockRecorder) ConnectedChainHeaders(chainID, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedChainHeaders", reflect.TypeOf((*MockBabylonQueryClient)(nil).ConnectedChainHeaders), chainID, pagination)
}

// ConnectedChainsInfo mocks base method.
func (m *MockBabylonQueryClient) ConnectedChainsInfo(chainIds []string) (*types4.QueryChainsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedChainsInfo", chainIds)
	ret0, _ := ret[0].(*types4.QueryChainsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectedChainsInfo indicates an expected call of ConnectedChainsInfo.
func (mr *MockBabylonQueryClientMockRecorder) ConnectedChainsInfo(chainIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedChainsInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).ConnectedChainsInfo), chainIds)
}

// ConnectedChainList mocks base method.
func (m *MockBabylonQueryClient) ConnectedChainList() (*types4.QueryChainListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedChainList")
	ret0, _ := ret[0].(*types4.QueryChainListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectedChainList indicates an expected call of ConnectedChainList.
func (mr *MockBabylonQueryClientMockRecorder) ConnectedChainList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedChainList", reflect.TypeOf((*MockBabylonQueryClient)(nil).ConnectedChainList))
}

// ContainsBTCBlock mocks base method.
func (m *MockBabylonQueryClient) ContainsBTCBlock(blockHash *chainhash.Hash) (*types0.QueryContainsBytesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsBTCBlock", blockHash)
	ret0, _ := ret[0].(*types0.QueryContainsBytesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsBTCBlock indicates an expected call of ContainsBTCBlock.
func (mr *MockBabylonQueryClientMockRecorder) ContainsBTCBlock(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsBTCBlock", reflect.TypeOf((*MockBabylonQueryClient)(nil).ContainsBTCBlock), blockHash)
}

// CurrentEpoch mocks base method.
func (m *MockBabylonQueryClient) CurrentEpoch() (*types2.QueryCurrentEpochResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEpoch")
	ret0, _ := ret[0].(*types2.QueryCurrentEpochResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentEpoch indicates an expected call of CurrentEpoch.
func (mr *MockBabylonQueryClientMockRecorder) CurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEpoch", reflect.TypeOf((*MockBabylonQueryClient)(nil).CurrentEpoch))
}

// DelegationLifecycle mocks base method.
func (m *MockBabylonQueryClient) DelegationLifecycle(delegator string) (*types2.QueryDelegationLifecycleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegationLifecycle", delegator)
	ret0, _ := ret[0].(*types2.QueryDelegationLifecycleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegationLifecycle indicates an expected call of DelegationLifecycle.
func (mr *MockBabylonQueryClientMockRecorder) DelegationLifecycle(delegator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegationLifecycle", reflect.TypeOf((*MockBabylonQueryClient)(nil).DelegationLifecycle), delegator)
}

// EndedEpochBTCHeight mocks base method.
func (m *MockBabylonQueryClient) EndedEpochBTCHeight(epochNum uint64) (*types3.QueryEndedEpochBtcHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndedEpochBTCHeight", epochNum)
	ret0, _ := ret[0].(*types3.QueryEndedEpochBtcHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndedEpochBTCHeight indicates an expected call of EndedEpochBTCHeight.
func (mr *MockBabylonQueryClientMockRecorder) EndedEpochBTCHeight(epochNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndedEpochBTCHeight", reflect.TypeOf((*MockBabylonQueryClient)(nil).EndedEpochBTCHeight), epochNum)
}

// EpochStatusCount mocks base method.
func (m *MockBabylonQueryClient) EpochStatusCount(epochCount uint64) (*types1.QueryRecentEpochStatusCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochStatusCount", epochCount)
	ret0, _ := ret[0].(*types1.QueryRecentEpochStatusCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpochStatusCount indicates an expected call of EpochStatusCount.
func (mr *MockBabylonQueryClientMockRecorder) EpochStatusCount(epochCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochStatusCount", reflect.TypeOf((*MockBabylonQueryClient)(nil).EpochStatusCount), epochCount)
}

// EpochingParams mocks base method.
func (m *MockBabylonQueryClient) EpochingParams() (*types2.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochingParams")
	ret0, _ := ret[0].(*types2.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpochingParams indicates an expected call of EpochingParams.
func (mr *MockBabylonQueryClientMockRecorder) EpochingParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochingParams", reflect.TypeOf((*MockBabylonQueryClient)(nil).EpochingParams))
}

// EpochsInfo mocks base method.
func (m *MockBabylonQueryClient) EpochsInfo(pagination *query.PageRequest) (*types2.QueryEpochsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochsInfo", pagination)
	ret0, _ := ret[0].(*types2.QueryEpochsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpochsInfo indicates an expected call of EpochsInfo.
func (mr *MockBabylonQueryClientMockRecorder) EpochsInfo(pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochsInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).EpochsInfo), pagination)
}

// EpochsInfoForEpochRange mocks base method.
func (m *MockBabylonQueryClient) EpochsInfoForEpochRange(startEpoch, endEpoch uint64) (*types2.QueryEpochsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochsInfoForEpochRange", startEpoch, endEpoch)
	ret0, _ := ret[0].(*types2.QueryEpochsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpochsInfoForEpochRange indicates an expected call of EpochsInfoForEpochRange.
func (mr *MockBabylonQueryClientMockRecorder) EpochsInfoForEpochRange(startEpoch, endEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochsInfoForEpochRange", reflect.TypeOf((*MockBabylonQueryClient)(nil).EpochsInfoForEpochRange), startEpoch, endEpoch)
}

// FinalizedConnectedChainInfo mocks base method.
func (m *MockBabylonQueryClient) FinalizedConnectedChainsInfo(chainIds []string) (*types4.QueryFinalizedChainsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizedConnectedChainsInfo", chainIds)
	ret0, _ := ret[0].(*types4.QueryFinalizedChainsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizedConnectedChainInfo indicates an expected call of FinalizedConnectedChainInfo.
func (mr *MockBabylonQueryClientMockRecorder) FinalizedConnectedChainsInfo(chainIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizedConnectedChainsInfo", reflect.TypeOf((*MockBabylonQueryClient)(nil).FinalizedConnectedChainsInfo), chainIds)
}

// GetBlock mocks base method.
func (m *MockBabylonQueryClient) GetBlock(height int64) (*coretypes.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(*coretypes.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBabylonQueryClientMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBabylonQueryClient)(nil).GetBlock), height)
}

// GetTx mocks base method.
func (m *MockBabylonQueryClient) GetTx(hash []byte) (*coretypes.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", hash)
	ret0, _ := ret[0].(*coretypes.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockBabylonQueryClientMockRecorder) GetTx(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockBabylonQueryClient)(nil).GetTx), hash)
}

// LatestEpochFromStatus mocks base method.
func (m *MockBabylonQueryClient) LatestEpochFromStatus(status types1.CheckpointStatus) (*types1.QueryLastCheckpointWithStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestEpochFromStatus", status)
	ret0, _ := ret[0].(*types1.QueryLastCheckpointWithStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestEpochFromStatus indicates an expected call of LatestEpochFromStatus.
func (mr *MockBabylonQueryClientMockRecorder) LatestEpochFromStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestEpochFromStatus", reflect.TypeOf((*MockBabylonQueryClient)(nil).LatestEpochFromStatus), status)
}

// LatestEpochMsgs mocks base method.
func (m *MockBabylonQueryClient) LatestEpochMsgs(endEpoch, epochCount uint64, pagination *query.PageRequest) (*types2.QueryLatestEpochMsgsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestEpochMsgs", endEpoch, epochCount, pagination)
	ret0, _ := ret[0].(*types2.QueryLatestEpochMsgsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestEpochMsgs indicates an expected call of LatestEpochMsgs.
func (mr *MockBabylonQueryClientMockRecorder) LatestEpochMsgs(endEpoch, epochCount, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestEpochMsgs", reflect.TypeOf((*MockBabylonQueryClient)(nil).LatestEpochMsgs), endEpoch, epochCount, pagination)
}

// QueryBTCCheckpoint mocks base method.
func (m *MockBabylonQueryClient) QueryBTCCheckpoint(f func(context.Context, types.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBTCCheckpoint", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBTCCheckpoint indicates an expected call of QueryBTCCheckpoint.
func (mr *MockBabylonQueryClientMockRecorder) QueryBTCCheckpoint(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBTCCheckpoint", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryBTCCheckpoint), f)
}

// QueryBTCLightclient mocks base method.
func (m *MockBabylonQueryClient) QueryBTCLightclient(f func(context.Context, types0.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBTCLightclient", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBTCLightclient indicates an expected call of QueryBTCLightclient.
func (mr *MockBabylonQueryClientMockRecorder) QueryBTCLightclient(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBTCLightclient", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryBTCLightclient), f)
}

// QueryCheckpointing mocks base method.
func (m *MockBabylonQueryClient) QueryCheckpointing(f func(context.Context, types1.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCheckpointing", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryCheckpointing indicates an expected call of QueryCheckpointing.
func (mr *MockBabylonQueryClientMockRecorder) QueryCheckpointing(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCheckpointing", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryCheckpointing), f)
}

// QueryEpoching mocks base method.
func (m *MockBabylonQueryClient) QueryEpoching(f func(context.Context, types2.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEpoching", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryEpoching indicates an expected call of QueryEpoching.
func (mr *MockBabylonQueryClientMockRecorder) QueryEpoching(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEpoching", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryEpoching), f)
}

// QueryMonitor mocks base method.
func (m *MockBabylonQueryClient) QueryMonitor(f func(context.Context, types3.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMonitor", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryMonitor indicates an expected call of QueryMonitor.
func (mr *MockBabylonQueryClientMockRecorder) QueryMonitor(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMonitor", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryMonitor), f)
}

// QueryStaking mocks base method.
func (m *MockBabylonQueryClient) QueryStaking(f func(context.Context, types5.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStaking", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryStaking indicates an expected call of QueryStaking.
func (mr *MockBabylonQueryClientMockRecorder) QueryStaking(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStaking", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryStaking), f)
}

// QueryZoneConcierge mocks base method.
func (m *MockBabylonQueryClient) QueryZoneConcierge(f func(context.Context, types4.QueryClient) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryZoneConcierge", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryZoneConcierge indicates an expected call of QueryZoneConcierge.
func (mr *MockBabylonQueryClientMockRecorder) QueryZoneConcierge(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryZoneConcierge", reflect.TypeOf((*MockBabylonQueryClient)(nil).QueryZoneConcierge), f)
}

// RawCheckpoint mocks base method.
func (m *MockBabylonQueryClient) RawCheckpoint(epochNumber uint64) (*types1.QueryRawCheckpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCheckpoint", epochNumber)
	ret0, _ := ret[0].(*types1.QueryRawCheckpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawCheckpoint indicates an expected call of RawCheckpoint.
func (mr *MockBabylonQueryClientMockRecorder) RawCheckpoint(epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCheckpoint", reflect.TypeOf((*MockBabylonQueryClient)(nil).RawCheckpoint), epochNumber)
}

// RawCheckpointList mocks base method.
func (m *MockBabylonQueryClient) RawCheckpointList(status types1.CheckpointStatus, pagination *query.PageRequest) (*types1.QueryRawCheckpointListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCheckpointList", status, pagination)
	ret0, _ := ret[0].(*types1.QueryRawCheckpointListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawCheckpointList indicates an expected call of RawCheckpointList.
func (mr *MockBabylonQueryClientMockRecorder) RawCheckpointList(status, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCheckpointList", reflect.TypeOf((*MockBabylonQueryClient)(nil).RawCheckpointList), status, pagination)
}

// ReportedCheckpointBTCHeight mocks base method.
func (m *MockBabylonQueryClient) ReportedCheckpointBTCHeight(hashStr string) (*types3.QueryReportedCheckpointBtcHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportedCheckpointBTCHeight", hashStr)
	ret0, _ := ret[0].(*types3.QueryReportedCheckpointBtcHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportedCheckpointBTCHeight indicates an expected call of ReportedCheckpointBTCHeight.
func (mr *MockBabylonQueryClientMockRecorder) ReportedCheckpointBTCHeight(hashStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportedCheckpointBTCHeight", reflect.TypeOf((*MockBabylonQueryClient)(nil).ReportedCheckpointBTCHeight), hashStr)
}

// StakingParams mocks base method.
func (m *MockBabylonQueryClient) StakingParams() (*types5.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingParams")
	ret0, _ := ret[0].(*types5.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingParams indicates an expected call of StakingParams.
func (mr *MockBabylonQueryClientMockRecorder) StakingParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingParams", reflect.TypeOf((*MockBabylonQueryClient)(nil).StakingParams))
}

// Stop mocks base method.
func (m *MockBabylonQueryClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBabylonQueryClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBabylonQueryClient)(nil).Stop))
}

// TxSearch mocks base method.
func (m *MockBabylonQueryClient) TxSearch(events []string, prove bool, page, perPage *int, orderBy string) (*coretypes.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", events, prove, page, perPage, orderBy)
	ret0, _ := ret[0].(*coretypes.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch.
func (mr *MockBabylonQueryClientMockRecorder) TxSearch(events, prove, page, perPage, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockBabylonQueryClient)(nil).TxSearch), events, prove, page, perPage, orderBy)
}
